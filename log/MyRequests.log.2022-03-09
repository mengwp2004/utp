2022-03-09 15:54:28,127 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 15:54:28,131 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:88] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 15:54:28,133 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 15:54:28,135 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 15:54:28,136 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 15:54:28,136 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 15:54:28,137 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:88] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 15:54:28,137 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:88] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 15:54:28,139 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 15:54:28,139 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 15:54:28,162 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=d58e358afa99040e27b92b13c8f2280&sign=1 HTTP/1.1" 500 None
2022-03-09 15:54:28,162 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=d58e358afa99040e27b92b13c8f2280&sign=1 HTTP/1.1" 500 None
2022-03-09 15:54:28,164 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 'd58e358afa99040e27b92b13c8f2280', 'sign': 1} ，返回数据：{'status': 2, 'data': '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27; // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application\'s state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 56559600,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "ZTVPyGh1gdj6DrBdR5xM";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ValueError</h1>\n<div class="detail">\n  <p class="errormsg">ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-56040416">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2091</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039984">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2076</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039360">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2073</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039120">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1518</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039600">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1516</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56040656">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1502</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039936">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py"</cite>,\n      line <em class="line">60</em>,\n      in <code class="function">order3</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@server.route( &quot;/choujiangget&quot;) # 默认是get</pre>\n<pre class="line before"><span class="ws"></span>def order3():</pre>\n<pre class="line before"><span class="ws">    </span>sign = flask.request.values.get(&quot;sign&quot;)</pre>\n<pre class="line current"><span class="ws">    </span>userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>res = dict()</pre>\n<pre class="line after"><span class="ws">    </span>if sign ==&quot;d58e358afa99040e27b92b13c8f2280&quot; and userid ==1:</pre>\n<pre class="line after"><span class="ws">        </span>res = {</pre>\n<pre class="line after"><span class="ws">            </span>&quot;error_code&quot;:0,</pre></div>\n</div>\n</ul>\n  <blockquote>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File &quot;C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py&quot;, line 60, in order3\n    userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File "C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py", line 60, in order3\n    userid = int(flask.request.values.get("userid"))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: \'d58e358afa99040e27b92b13c8f2280\'\n\n-->\n'}
2022-03-09 15:54:28,164 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 'd58e358afa99040e27b92b13c8f2280', 'sign': 1} ，返回数据：{'status': 2, 'data': '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27; // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application\'s state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 56559600,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "ZTVPyGh1gdj6DrBdR5xM";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ValueError</h1>\n<div class="detail">\n  <p class="errormsg">ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-56040416">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2091</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039984">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2076</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039360">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2073</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039120">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1518</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039600">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1516</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56040656">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1502</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039936">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py"</cite>,\n      line <em class="line">60</em>,\n      in <code class="function">order3</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@server.route( &quot;/choujiangget&quot;) # 默认是get</pre>\n<pre class="line before"><span class="ws"></span>def order3():</pre>\n<pre class="line before"><span class="ws">    </span>sign = flask.request.values.get(&quot;sign&quot;)</pre>\n<pre class="line current"><span class="ws">    </span>userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>res = dict()</pre>\n<pre class="line after"><span class="ws">    </span>if sign ==&quot;d58e358afa99040e27b92b13c8f2280&quot; and userid ==1:</pre>\n<pre class="line after"><span class="ws">        </span>res = {</pre>\n<pre class="line after"><span class="ws">            </span>&quot;error_code&quot;:0,</pre></div>\n</div>\n</ul>\n  <blockquote>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File &quot;C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py&quot;, line 60, in order3\n    userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File "C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py", line 60, in order3\n    userid = int(flask.request.values.get("userid"))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: \'d58e358afa99040e27b92b13c8f2280\'\n\n-->\n'}
2022-03-09 15:54:28,164 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 'd58e358afa99040e27b92b13c8f2280', 'sign': 1} ，返回数据：{'status': 2, 'data': '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27; // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application\'s state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 56559600,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "ZTVPyGh1gdj6DrBdR5xM";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ValueError</h1>\n<div class="detail">\n  <p class="errormsg">ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-56040416">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2091</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039984">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2076</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039360">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2073</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039120">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1518</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039600">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1516</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56040656">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1502</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56039936">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py"</cite>,\n      line <em class="line">60</em>,\n      in <code class="function">order3</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@server.route( &quot;/choujiangget&quot;) # 默认是get</pre>\n<pre class="line before"><span class="ws"></span>def order3():</pre>\n<pre class="line before"><span class="ws">    </span>sign = flask.request.values.get(&quot;sign&quot;)</pre>\n<pre class="line current"><span class="ws">    </span>userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>res = dict()</pre>\n<pre class="line after"><span class="ws">    </span>if sign ==&quot;d58e358afa99040e27b92b13c8f2280&quot; and userid ==1:</pre>\n<pre class="line after"><span class="ws">        </span>res = {</pre>\n<pre class="line after"><span class="ws">            </span>&quot;error_code&quot;:0,</pre></div>\n</div>\n</ul>\n  <blockquote>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File &quot;C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py&quot;, line 60, in order3\n    userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File "C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py", line 60, in order3\n    userid = int(flask.request.values.get("userid"))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: \'d58e358afa99040e27b92b13c8f2280\'\n\n-->\n'}
2022-03-09 15:55:48,740 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 15:55:48,744 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:90] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 15:55:48,746 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 15:55:48,748 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 15:55:48,749 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 15:55:48,749 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 15:55:48,751 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:90] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 15:55:48,751 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:90] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 15:55:48,753 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 15:55:48,753 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 15:55:48,786 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=d58e358afa99040e27b92b13c8f2280&sign=1 HTTP/1.1" 500 None
2022-03-09 15:55:48,786 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=d58e358afa99040e27b92b13c8f2280&sign=1 HTTP/1.1" 500 None
2022-03-09 15:55:48,788 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 'd58e358afa99040e27b92b13c8f2280', 'sign': 1} ，返回数据：{'status': 2, 'data': '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27; // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application\'s state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 56358896,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "ZTVPyGh1gdj6DrBdR5xM";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ValueError</h1>\n<div class="detail">\n  <p class="errormsg">ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-56358512">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2091</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56359088">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2076</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56360912">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2073</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56359520">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1518</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56358656">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1516</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56357552">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1502</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56358992">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py"</cite>,\n      line <em class="line">60</em>,\n      in <code class="function">order3</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@server.route( &quot;/choujiangget&quot;) # 默认是get</pre>\n<pre class="line before"><span class="ws"></span>def order3():</pre>\n<pre class="line before"><span class="ws">    </span>sign = flask.request.values.get(&quot;sign&quot;)</pre>\n<pre class="line current"><span class="ws">    </span>userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>res = dict()</pre>\n<pre class="line after"><span class="ws">    </span>if sign ==&quot;d58e358afa99040e27b92b13c8f2280&quot; and userid ==1:</pre>\n<pre class="line after"><span class="ws">        </span>res = {</pre>\n<pre class="line after"><span class="ws">            </span>&quot;error_code&quot;:0,</pre></div>\n</div>\n</ul>\n  <blockquote>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File &quot;C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py&quot;, line 60, in order3\n    userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File "C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py", line 60, in order3\n    userid = int(flask.request.values.get("userid"))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: \'d58e358afa99040e27b92b13c8f2280\'\n\n-->\n'}
2022-03-09 15:55:48,788 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 'd58e358afa99040e27b92b13c8f2280', 'sign': 1} ，返回数据：{'status': 2, 'data': '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27; // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application\'s state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 56358896,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "ZTVPyGh1gdj6DrBdR5xM";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ValueError</h1>\n<div class="detail">\n  <p class="errormsg">ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-56358512">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2091</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56359088">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2076</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56360912">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2073</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56359520">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1518</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56358656">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1516</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56357552">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1502</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56358992">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py"</cite>,\n      line <em class="line">60</em>,\n      in <code class="function">order3</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@server.route( &quot;/choujiangget&quot;) # 默认是get</pre>\n<pre class="line before"><span class="ws"></span>def order3():</pre>\n<pre class="line before"><span class="ws">    </span>sign = flask.request.values.get(&quot;sign&quot;)</pre>\n<pre class="line current"><span class="ws">    </span>userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>res = dict()</pre>\n<pre class="line after"><span class="ws">    </span>if sign ==&quot;d58e358afa99040e27b92b13c8f2280&quot; and userid ==1:</pre>\n<pre class="line after"><span class="ws">        </span>res = {</pre>\n<pre class="line after"><span class="ws">            </span>&quot;error_code&quot;:0,</pre></div>\n</div>\n</ul>\n  <blockquote>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File &quot;C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py&quot;, line 60, in order3\n    userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File "C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py", line 60, in order3\n    userid = int(flask.request.values.get("userid"))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: \'d58e358afa99040e27b92b13c8f2280\'\n\n-->\n'}
2022-03-09 15:55:48,788 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 'd58e358afa99040e27b92b13c8f2280', 'sign': 1} ，返回数据：{'status': 2, 'data': '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27; // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application\'s state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 56358896,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "ZTVPyGh1gdj6DrBdR5xM";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ValueError</h1>\n<div class="detail">\n  <p class="errormsg">ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-56358512">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2091</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56359088">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2076</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56360912">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2073</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56359520">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1518</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56358656">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1516</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56357552">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1502</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-56358992">\n  <h4>File <cite class="filename">"C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py"</cite>,\n      line <em class="line">60</em>,\n      in <code class="function">order3</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@server.route( &quot;/choujiangget&quot;) # 默认是get</pre>\n<pre class="line before"><span class="ws"></span>def order3():</pre>\n<pre class="line before"><span class="ws">    </span>sign = flask.request.values.get(&quot;sign&quot;)</pre>\n<pre class="line current"><span class="ws">    </span>userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>res = dict()</pre>\n<pre class="line after"><span class="ws">    </span>if sign ==&quot;d58e358afa99040e27b92b13c8f2280&quot; and userid ==1:</pre>\n<pre class="line after"><span class="ws">        </span>res = {</pre>\n<pre class="line after"><span class="ws">            </span>&quot;error_code&quot;:0,</pre></div>\n</div>\n</ul>\n  <blockquote>ValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py&quot;, line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File &quot;C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py&quot;, line 60, in order3\n    userid = int(flask.request.values.get(&quot;userid&quot;))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: &#x27;d58e358afa99040e27b92b13c8f2280&#x27;</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\flask\\app.py", line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File "C:\\Users\\Administrator\\Desktop\\my_api\\lib\\order.py", line 60, in order3\n    userid = int(flask.request.values.get("userid"))# 拿到的都是字符串\nValueError: invalid literal for int() with base 10: \'d58e358afa99040e27b92b13c8f2280\'\n\n-->\n'}
2022-03-09 16:04:04,147 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 16:04:04,149 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:91] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 16:04:04,152 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:04:04,154 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 16:04:04,156 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:04:04,156 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:04:04,158 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:91] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:04:04,158 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:91] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:04:04,161 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:04:04,161 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:04:04,173 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:04:04,173 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:04:04,174 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:04:04,174 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:04:04,174 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:10:13,181 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 16:10:13,184 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 16:10:13,186 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:10:13,198 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 16:10:13,199 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:10:13,199 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:10:13,201 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:10:13,201 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:10:13,203 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:10:13,203 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:10:13,214 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:10:13,214 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:10:13,215 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:10:13,215 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:10:13,215 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:10:13,217 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------None
2022-03-09 16:10:13,217 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------None
2022-03-09 16:10:13,217 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------None
2022-03-09 16:14:22,097 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 16:14:22,101 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 16:14:22,103 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:14:22,115 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 16:14:22,117 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:14:22,117 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:14:22,118 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:14:22,118 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:14:22,120 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:14:22,120 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:14:22,132 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:14:22,132 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:14:22,133 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:14:22,133 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:14:22,133 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:14:22,136 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------1
2022-03-09 16:14:22,136 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------1
2022-03-09 16:14:22,136 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------1
2022-03-09 16:15:59,116 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 16:15:59,118 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 16:15:59,120 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:15:59,131 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 16:15:59,132 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:15:59,132 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 16:15:59,133 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:15:59,133 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 16:15:59,136 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:15:59,136 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 16:15:59,148 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:15:59,148 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 16:15:59,149 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:15:59,149 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:15:59,149 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 16:15:59,152 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------1
2022-03-09 16:15:59,152 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------1
2022-03-09 16:15:59,152 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:redis存的值count--------------1
2022-03-09 16:15:59,153 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 16:15:59,153 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 16:15:59,153 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\cases\test_cj.py[line:92] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 18:08:20,518 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 18:08:20,527 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 18:08:20,530 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 18:08:20,542 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 18:08:20,544 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 18:08:20,544 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 18:08:20,547 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 18:08:20,547 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 18:08:20,549 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 18:08:20,549 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 18:08:20,561 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 18:08:20,561 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 18:08:20,563 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 18:08:20,563 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 18:08:20,563 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 18:10:33,365 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 18:10:33,367 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 18:10:33,369 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 18:10:33,381 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 18:10:33,382 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 18:10:33,382 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 18:10:33,384 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 18:10:33,384 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 18:10:33,386 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 18:10:33,386 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 18:10:33,398 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 18:10:33,398 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 18:10:33,399 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 18:10:33,399 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 18:10:33,399 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 18:10:33,402 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 18:10:33,402 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 18:10:33,402 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 18:10:33,403 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 18:10:33,403 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 18:10:33,403 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 21:39:58,025 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 21:39:58,026 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 21:39:58,029 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 21:39:58,031 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 21:39:58,032 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 21:39:58,032 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 21:39:58,033 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 21:39:58,033 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 21:39:58,036 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 21:39:58,036 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 21:39:58,038 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 21:39:58,038 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 21:39:58,039 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 21:39:58,039 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 21:39:58,039 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 21:39:58,046 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 21:39:58,046 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 21:39:58,046 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 21:39:58,051 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 21:39:58,051 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 21:39:58,051 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 21:44:32,278 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 21:44:32,279 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 21:44:32,281 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 21:44:32,283 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 21:44:32,284 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 21:44:32,284 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 21:44:32,287 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 21:44:32,287 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 21:44:32,288 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 21:44:32,288 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 21:44:32,289 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 21:44:32,289 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 21:44:32,292 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 21:44:32,292 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 21:44:32,292 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 21:44:32,294 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 21:44:32,294 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 21:44:32,294 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 21:44:32,302 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 21:44:32,302 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 21:44:32,302 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 22:31:57,513 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/regpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456', 'cpwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'msg': '注册成功'}}
2022-03-09 22:31:57,520 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:reg--------------{'id': 1, 'username': 'mengliping', 'passwd': '123456'}
2022-03-09 22:31:57,523 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 22:31:57,524 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "POST /loginpost HTTP/1.1" 200 119
2022-03-09 22:31:57,526 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 22:31:57,526 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/loginpost 请求方式：post data：{'username': 'mengliping', 'passwd': '123456'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}}
2022-03-09 22:31:57,528 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 22:31:57,528 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:login--------------{'error_code': 0, 'login_info': {'userId': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280', 'login_time': '202203090903'}}
2022-03-09 22:31:57,529 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 22:31:57,529 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:227] - DEBUG:Starting new HTTP connection (1): 192.168.124.6:9000
2022-03-09 22:31:57,540 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 22:31:57,540 - C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\urllib3\connectionpool.py[line:452] - DEBUG:http://192.168.124.6:9000 "GET /choujiangget?userid=1&sign=d58e358afa99040e27b92b13c8f2280 HTTP/1.1" 200 107
2022-03-09 22:31:57,542 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 22:31:57,542 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 22:31:57,542 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\my_requests.py[line:47] - DEBUG:url:http://192.168.124.6:9000/choujiangget 请求方式：get data：{'userid': 1, 'sign': 'd58e358afa99040e27b92b13c8f2280'} ，返回数据：{'status': 1, 'data': {'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}}
2022-03-09 22:31:57,544 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 22:31:57,544 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 22:31:57,544 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:redis存的值count--------------1
2022-03-09 22:31:57,547 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 22:31:57,547 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
2022-03-09 22:31:57,547 - C:\Users\Administrator\PycharmProjects\jnz\day12\utp\core\tools.py[line:66] - DEBUG:choujiang--------------{'error_code': 0, 'product_info': {'product_name': '超市高乐高抽奖', 'imgurl': 'xxxxx', 'count': 1}}
